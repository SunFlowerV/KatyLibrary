@using Microsoft.AspNetCore.Identity

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

<ul class="navbar-nav">
    @if (SignInManager.IsSignedIn(User))
    {
        if (await UserManager.IsInRoleAsync(await UserManager.GetUserAsync(User), "admin"))
        {
            <li class="nav-item">
                <a id="manage" class="nav-link" asp-controller="Admin" asp-action="AdminR" title="Manage">Hello @UserManager.GetUserName(User)!</a>
            </li>
        }
        if (await UserManager.IsInRoleAsync(await UserManager.GetUserAsync(User), "user"))
        {
            <li class="nav-item">
                <a id="manage" class="nav-link" asp-controller="Account" asp-action="MyBook" title="Аккаунт">Hello @UserManager.GetUserName(User)!</a>
            </li>
        }
        <li class="nav-item">
            <form id="logoutForm" class="form-inline" asp-controller="Account" asp-action="Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                <button id="logout" type="submit" class="nav-link btn btn-link">Выйти</button>
            </form>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link" id="register" asp-controller="Account" asp-action="Register">Регистрация</a>
        </li>
        <li class="nav-item">
            <a class="nav-link" id="login" asp-controller="Account" asp-action="Login">Войти</a>
        </li>
    }

</ul>

